import asyncio
import logging
import os
import time # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω —Å—é–¥–∞
from typing import Dict, List, Any, AsyncGenerator
from datetime import datetime, timedelta

from telegram import Update, Message
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest
import google.generativeai as genai
from google.generativeai.types import GenerationConfig, SafetySetting, HarmCategory, Part, HarmBlockThreshold

from dotenv import load_dotenv

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    SYSTEM_INSTRUCTION = os.getenv(
        "SYSTEM_INSTRUCTION",
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –≤ Telegram. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    MAX_CONTEXT_TOKENS = int(os.getenv("MAX_CONTEXT_TOKENS", "700000")) # 700k —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    MAX_CONVERSATION_MESSAGES = int(os.getenv("MAX_CONVERSATION_MESSAGES", "100")) # –õ–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    MAX_MESSAGE_LENGTH = 4096 # –õ–∏–º–∏—Ç Telegram (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞)
    RATE_LIMIT_MINUTES = int(os.getenv("RATE_LIMIT_MINUTES", "1"))
    RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", "20")) # Gemini 1.5 Pro –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    # –ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    GEMINI_MODEL_NAME = os.getenv("GEMINI_MODEL_NAME", "gemini-1.5-pro-latest")


    @classmethod
    def validate(cls):
        if not cls.TELEGRAM_BOT_TOKEN or not cls.GEMINI_API_KEY:
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, GEMINI_API_KEY")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Gemini: {cls.GEMINI_MODEL_NAME}")
        logger.info(f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {cls.MAX_CONTEXT_TOKENS}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ ---
class RateLimiter:
    def __init__(self):
        self.user_requests: Dict[int, List[datetime]] = {}

    def is_allowed(self, user_id: int) -> bool:
        now = datetime.now()
        cutoff = now - timedelta(minutes=Config.RATE_LIMIT_MINUTES)
        timestamps = self.user_requests.get(user_id, [])
        valid_timestamps = [t for t in timestamps if t > cutoff]
        if len(valid_timestamps) >= Config.RATE_LIMIT_REQUESTS:
            self.user_requests[user_id] = valid_timestamps
            return False
        valid_timestamps.append(now)
        self.user_requests[user_id] = valid_timestamps
        return True

    def cleanup_old_data(self):
        cutoff = datetime.now() - timedelta(hours=1) # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        users_before_cleanup = len(self.user_requests)
        self.user_requests = {
            uid: ts
            for uid, ts in self.user_requests.items()
            if any(t > cutoff for t in ts)
        }
        cleaned_count = users_before_cleanup - len(self.user_requests)
        if cleaned_count > 0:
            logger.info(f"üßπ RateLimiter: –æ—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {cleaned_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

class ConversationManager:
    def __init__(self):
        self.conversations: Dict[int, List[Dict[str, Any]]] = {}
        self.last_activity: Dict[int, datetime] = {}

    def add_message(self, user_id: int, role: str, parts: List[Part]):
        if user_id not in self.conversations:
            self.conversations[user_id] = []
        self.conversations[user_id].append({"role": role, "parts": parts})
        self.last_activity[user_id] = datetime.now()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
        if len(self.conversations[user_id]) > Config.MAX_CONVERSATION_MESSAGES:
            self.conversations[user_id] = self.conversations[user_id][-Config.MAX_CONVERSATION_MESSAGES:]

    def get_conversation(self, user_id: int) -> List[Dict[str, Any]]:
        return self.conversations.get(user_id, [])

    def clear_conversation(self, user_id: int):
        if user_id in self.conversations:
            del self.conversations[user_id]
        if user_id in self.last_activity:
            del self.last_activity[user_id]
        logger.info(f"üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞.")


    def cleanup_inactive_conversations(self):
        cutoff = datetime.now() - timedelta(hours=24) # –û—á–∏—â–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        to_remove = [uid for uid, t in self.last_activity.items() if t < cutoff]
        for uid in to_remove:
            self.clear_conversation(uid) # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –ª–æ–≥–≥–∏—Ä—É–µ—Ç
        if to_remove:
            logger.info(f"üßπ ConversationManager: –æ—á–∏—â–µ–Ω–æ {len(to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class GeminiBot:
    def __init__(self):
        try:
            genai.configure(api_key=Config.GEMINI_API_KEY)
        except Exception as e:
            logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å Gemini API: {e}", exc_info=True)
            raise

        self.model = genai.GenerativeModel(
            model_name=Config.GEMINI_MODEL_NAME,
            system_instruction=Config.SYSTEM_INSTRUCTION,
            generation_config=GenerationConfig( # type: ignore
                temperature=0.75,
                top_p=0.95,
                top_k=40,
                max_output_tokens=8192, # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            ),
            safety_settings={
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            }
        )
        self.conversation_manager = ConversationManager()
        self.rate_limiter = RateLimiter()
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å Gemini '{Config.GEMINI_MODEL_NAME}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def post_init(self, application: Application):
        asyncio.create_task(self._periodic_cleanup())
        logger.info("üõ†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞.")

    async def _periodic_cleanup(self):
        while True:
            await asyncio.sleep(3600) # –ö–∞–∂–¥—ã–π —á–∞—Å
            try:
                logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
                self.conversation_manager.cleanup_inactive_conversations()
                self.rate_limiter.cleanup_old_data()
                logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}", exc_info=True)

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_name = user.first_name if user else "–¥—Ä—É–≥"
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ **Google Gemini {Config.GEMINI_MODEL_NAME}**.\n\n"
            "–Ø –ø–æ–º–Ω—é –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–ª–∏ –±–µ–∑).\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            parse_mode=ParseMode.MARKDOWN
        )

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user:
            self.conversation_manager.clear_conversation(update.effective_user.id)
            await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clear –±–µ–∑ effective_user.")


    async def _prune_history_by_tokens(self, user_id: int) -> List[Dict[str, Any]]:
        history = self.conversation_manager.get_conversation(user_id)
        if not history:
            return []

        initial_message_count = len(history)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: count_tokens –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç system_instruction, –∑–∞–¥–∞–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª–∏.
        # MAX_CONTEXT_TOKENS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å —ç—Ç–∏–º —É—á—ë—Ç–æ–º.
        while True:
            try:
                # –í `google-generativeai` –≤–µ—Ä—Å–∏–∏ 0.5.0+ `count_tokens` –¥–ª—è `GenerativeModel`
                # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `contents` (–∏—Å—Ç–æ—Ä–∏—é) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å `total_tokens`.
                # –ï—Å–ª–∏ `history` –ø—É—Å—Ç–∞, —Ç–æ `count_tokens` –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å 0.
                if not history:
                    token_count_response = await asyncio.to_thread(self.model.count_tokens, []) # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 0
                    current_total_tokens = getattr(token_count_response, 'total_tokens', 0)

                else:
                    # `model.count_tokens` –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º, –æ–±–µ—Ä–Ω–µ–º –≤ to_thread –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    token_count_response = await asyncio.to_thread(self.model.count_tokens, history)
                    current_total_tokens = token_count_response.total_tokens

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã, –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                # –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ. –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å.
                break 

            if current_total_tokens <= Config.MAX_CONTEXT_TOKENS:
                break

            if len(history) > 1: # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–µ—Å–ª–∏ –æ–Ω–æ –æ–¥–Ω–æ)
                history.pop(0)
            else: # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–Ω–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è) –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                break
        
        final_message_count = len(history)
        if final_message_count < initial_message_count:
            logger.info(
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {user_id} —É—Ä–µ–∑–∞–Ω–∞ —Å {initial_message_count} –¥–æ {final_message_count} —Å–æ–æ–±—â–µ–Ω–∏–π. "
                f"–¢–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —É—Ä–µ–∑–∫–∏: {current_total_tokens if 'current_total_tokens' in locals() else 'N/A'}."
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ get_conversation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é)
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, get_conversation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É, —Ç–∞–∫ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ history —É–∂–µ –æ—Ç—Ä–∞–∂–µ–Ω–æ.
        # –ù–æ –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:
        self.conversation_manager.conversations[user_id] = history
        return history

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message or not update.effective_user:
            return

        user_id = update.effective_user.id
        message = update.message
        
        if not self.rate_limiter.is_allowed(user_id):
            await message.reply_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        parts: List[Part] = []
        text_content = message.text or message.caption or ""

        if message.photo:
            try:
                photo_file = await message.photo[-1].get_file()
                photo_bytes = await photo_file.download_as_bytearray()
                # –°–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) - –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —ç—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                parts.append(Part.from_data(data=bytes(photo_bytes), mime_type="image/jpeg"))
                if text_content: # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –æ–Ω–∞ —É–∂–µ –≤ text_content
                     parts.append(Part.from_text(text_content))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {user_id}: {e}", exc_info=True)
                await message.reply_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        elif text_content: # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            parts.append(Part.from_text(text_content))

        if not parts: # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–∫–µ—Ä, –∞—É–¥–∏–æ –∏ —Ç.–¥.)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, —á—Ç–æ —Ç–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}.")
            return

        try:
            await context.bot.send_chat_action(chat_id=user_id, action="typing")
            
            self.conversation_manager.add_message(user_id, "user", parts)
            pruned_history = await self._prune_history_by_tokens(user_id)
            
            if not pruned_history and Config.SYSTEM_INSTRUCTION:
                # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è,
                # Gemini API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                # –û–¥–Ω–∞–∫–æ, `add_message` —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                # –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ `pruned_history` –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                # –ï—Å–ª–∏ –∂–µ `_prune_history_by_tokens` –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–æ:
                # logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {user_id} –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                # await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /clear.")
                # return
                pass # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ add_message —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.


            placeholder_message = await message.reply_text("üß† –î—É–º–∞—é...", quote=True)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
            response_stream = await self.model.generate_content_async(
                pruned_history, # `pruned_history` —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç parts –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                stream=True
            )
            
            await self._stream_and_edit_message(response_stream, placeholder_message, user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}", exc_info=True)
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            if "blocked by safety setting" in str(e).lower():
                error_message = " maaf, saya tidak bisa menanggapi permintaan ini karena batasan keamanan." #–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–º, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞—é—Ç safety settings (–ª—É—á—à–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å)
            elif "The HAP check failed" in str(e): # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ Gemini, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
                 error_message = " maaf, saya tidak bisa menanggapi permintaan ini karena batasan keamanan."
            elif "quota" in str(e).lower():
                error_message = " –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Gemini. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            try:
                if 'placeholder_message' in locals() and placeholder_message:
                    await placeholder_message.edit_text(error_message)
                else:
                    await message.reply_text(error_message)
            except Exception as send_error:
                 logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")


    async def _stream_and_edit_message(self, stream: AsyncGenerator, tg_message: Message, user_id: int):
        full_response = ""
        buffer = ""
        last_edit_time = time.monotonic()
        edit_interval = 1.2  # —Å–µ–∫—É–Ω–¥—ã
        min_buffer_len_for_edit = 50 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –¥–µ—Ä–≥–∞—Ç—å API

        try:
            async for chunk in stream:
                if text_part := getattr(chunk, 'text', None): # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞–Ω–∫–∞
                    buffer += text_part
                    full_response += text_part
                
                current_time = time.monotonic()
                if (current_time - last_edit_time > edit_interval and buffer) or len(buffer) > min_buffer_len_for_edit :
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–ª–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞, –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º MARKDOWN
                        # –î–ª—è MarkdownV2 –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: .!-_*[]()~`>#+=|{}
                        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º ParseMode.MARKDOWN, –æ–Ω –ø—Ä–æ—â–µ.
                        await tg_message.edit_text(full_response + "‚ñà", parse_mode=ParseMode.MARKDOWN)
                        last_edit_time = current_time
                        buffer = ""
                    except BadRequest as e:
                        if "Message is not modified" not in str(e):
                            logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (user {user_id}): {e}")
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (user {user_id}): {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ Telegram

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫—É—Ä—Å–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            if full_response:
                try:
                    await tg_message.edit_text(full_response, parse_mode=ParseMode.MARKDOWN)
                except BadRequest as e:
                    if "Message is not modified" not in str(e):
                        logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (user {user_id}): {e}")
                except Exception as e:
                     logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (user {user_id}): {e}")

            else: # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ safety settings –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)
                logger.info(f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è user {user_id}.")
                await tg_message.edit_text("üòï –û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –±—ã–ª –ø—É—Å—Ç—ã–º.", parse_mode=ParseMode.MARKDOWN)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            if full_response:
                 self.conversation_manager.add_message(user_id, "model", [Part.from_text(full_response)])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user {user_id}: {e}", exc_info=True)
            try:
                await tg_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.", parse_mode=ParseMode.MARKDOWN)
            except Exception as final_edit_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è user {user_id}: {final_edit_error}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {Config.GEMINI_MODEL_NAME} Telegram Bot...")
        Config.validate() # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞
        
        bot_instance = GeminiBot() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        
        application = (Application.builder()
                       .token(Config.TELEGRAM_BOT_TOKEN) # type: ignore
                       .concurrent_updates(True) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                       .post_init(bot_instance.post_init)
                       .build())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
        application.add_handler(MessageHandler(
            (filters.TEXT | filters.PHOTO) & ~filters.COMMAND,
            bot_instance.handle_message
        ))
        application.add_handler(CommandHandler("start", bot_instance.start_command))
        application.add_handler(CommandHandler("clear", bot_instance.clear_command))
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram: application.add_error_handler(error_handler_callback)
        
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫ polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except ValueError as ve: # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ve}", exc_info=True)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()