import asyncio
import logging
import os
import time # –î–ª—è time.monotonic() –∏ time.sleep()
from typing import Dict, List, Any, AsyncGenerator

from datetime import datetime, timedelta

from telegram import Update, Message
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest
import google.generativeai as genai
from google.generativeai.types import GenerationConfig, SafetySetting, HarmCategory, Part, HarmBlockThreshold
# from google.api_core.exceptions import InvalidArgument # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —Ç.–∫. –µ—Å—Ç—å —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é

from dotenv import load_dotenv

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    SYSTEM_INSTRUCTION = os.getenv(
        "SYSTEM_INSTRUCTION",
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –≤ Telegram. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    MAX_CONTEXT_TOKENS = int(os.getenv("MAX_CONTEXT_TOKENS", "700000"))
    MAX_CONVERSATION_MESSAGES = int(os.getenv("MAX_CONVERSATION_MESSAGES", "100"))
    MAX_MESSAGE_LENGTH = 4096 # –õ–∏–º–∏—Ç Telegram (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞)
    RATE_LIMIT_MINUTES = int(os.getenv("RATE_LIMIT_MINUTES", "1"))
    RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", "20"))
    GEMINI_MODEL_NAME = os.getenv("GEMINI_MODEL_NAME", "gemini-1.5-pro-latest")

    @classmethod
    def validate(cls):
        if not cls.TELEGRAM_BOT_TOKEN or not cls.GEMINI_API_KEY:
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, GEMINI_API_KEY")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Gemini: {cls.GEMINI_MODEL_NAME}")
        logger.info(f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {cls.MAX_CONTEXT_TOKENS}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ ---
class RateLimiter:
    def __init__(self):
        self.user_requests: Dict[int, List[datetime]] = {}

    def is_allowed(self, user_id: int) -> bool:
        now = datetime.now()
        cutoff = now - timedelta(minutes=Config.RATE_LIMIT_MINUTES)
        timestamps = self.user_requests.get(user_id, [])
        
        valid_timestamps = [t for t in timestamps if t > cutoff]
        
        if len(valid_timestamps) >= Config.RATE_LIMIT_REQUESTS:
            self.user_requests[user_id] = valid_timestamps # –û–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            return False
        
        valid_timestamps.append(now)
        self.user_requests[user_id] = valid_timestamps
        return True

    def cleanup_old_data(self):
        cutoff = datetime.now() - timedelta(hours=1)
        users_before_cleanup = len(self.user_requests)
        
        cleaned_requests: Dict[int, List[datetime]] = {}
        for user_id, timestamps in self.user_requests.items():
            valid_timestamps = [t for t in timestamps if t > cutoff]
            if valid_timestamps: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                cleaned_requests[user_id] = valid_timestamps
        
        self.user_requests = cleaned_requests
        users_after_cleanup = len(self.user_requests)
        
        if users_before_cleanup > 0 : # –õ–æ–≥–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            if users_before_cleanup != users_after_cleanup:
                logger.info(f"üßπ RateLimiter: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å {users_before_cleanup} –Ω–∞ {users_after_cleanup} –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
            else:
                 logger.info(f"üßπ RateLimiter: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {users_before_cleanup} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å).")


class ConversationManager:
    def __init__(self):
        self.conversations: Dict[int, List[Dict[str, Any]]] = {}
        self.last_activity: Dict[int, datetime] = {}

    def add_message(self, user_id: int, role: str, parts: List[Part]):
        if user_id not in self.conversations:
            self.conversations[user_id] = []
        self.conversations[user_id].append({"role": role, "parts": parts})
        self.last_activity[user_id] = datetime.now()

        if len(self.conversations[user_id]) > Config.MAX_CONVERSATION_MESSAGES:
            self.conversations[user_id] = self.conversations[user_id][-Config.MAX_CONVERSATION_MESSAGES:]

    def get_conversation(self, user_id: int) -> List[Dict[str, Any]]:
        return self.conversations.get(user_id, [])

    def clear_conversation(self, user_id: int):
        if user_id in self.conversations:
            del self.conversations[user_id]
        if user_id in self.last_activity:
            del self.last_activity[user_id]
        logger.info(f"üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞.")

    def cleanup_inactive_conversations(self):
        cutoff = datetime.now() - timedelta(hours=24)
        to_remove = [uid for uid, t in self.last_activity.items() if t < cutoff]
        if to_remove: # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–¥–∞–ª—è—Ç—å
            for uid in to_remove:
                self.clear_conversation(uid) # clear_conversation —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
            logger.info(f"üßπ ConversationManager: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ {len(to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.")


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class GeminiBot:
    def __init__(self):
        try:
            genai.configure(api_key=Config.GEMINI_API_KEY)
        except Exception as e:
            logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å Gemini API: {e}", exc_info=True)
            raise

        self.model = genai.GenerativeModel(
            model_name=Config.GEMINI_MODEL_NAME,
            system_instruction=Config.SYSTEM_INSTRUCTION,
            generation_config=GenerationConfig( # type: ignore[call-arg] # MyPy –º–æ–∂–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ kwargs –≤ TypedDict-like –∫–ª–∞—Å—Å–∞—Ö
                temperature=0.75,
                top_p=0.95,
                top_k=40,
                max_output_tokens=8192,
            ),
            safety_settings={
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            }
        )
        self.conversation_manager = ConversationManager()
        self.rate_limiter = RateLimiter()
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å Gemini '{Config.GEMINI_MODEL_NAME}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def post_init(self, application: Application):
        asyncio.create_task(self._periodic_cleanup())
        logger.info("üõ†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞.")

    async def _periodic_cleanup(self):
        while True:
            await asyncio.sleep(3600) # –ö–∞–∂–¥—ã–π —á–∞—Å
            try:
                logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
                self.conversation_manager.cleanup_inactive_conversations()
                self.rate_limiter.cleanup_old_data()
                logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}", exc_info=True)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message: return
        user = update.effective_user
        user_name = user.first_name if user else "–¥—Ä—É–≥"
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ **Google {Config.GEMINI_MODEL_NAME}**.\n\n"
            "–Ø –ø–æ–º–Ω—é –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–ª–∏ –±–µ–∑).\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            parse_mode=ParseMode.MARKDOWN
        )

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message: return
        if update.effective_user:
            self.conversation_manager.clear_conversation(update.effective_user.id)
            await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clear –±–µ–∑ effective_user.")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


    async def _prune_history_by_tokens(self, user_id: int) -> List[Dict[str, Any]]:
        history = self.conversation_manager.get_conversation(user_id)
        if not history:
            return []

        initial_message_count = len(history)
        current_total_tokens = 0 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è

        while True:
            try:
                if not history: # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–µ–∑–∫–∏
                    current_total_tokens = 0
                else:
                    # model.count_tokens —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ to_thread
                    # –í google-generativeai==0.5.0 count_tokens(empty_list) –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É,
                    # –ø–æ—ç—Ç–æ–º—É if not history: current_total_tokens = 0 –≤—ã—à–µ —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç.
                    token_count_response = await asyncio.to_thread(self.model.count_tokens, history)
                    current_total_tokens = token_count_response.total_tokens

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
                break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –µ—Å—Ç—å

            if current_total_tokens <= Config.MAX_CONTEXT_TOKENS:
                break

            if len(history) > 1:
                history.pop(0) # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else: # –û—Å—Ç–∞–ª–æ—Å—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –≤—Å–µ –µ—â–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (–∏–ª–∏ –ª–∏–º–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª)
                  # –ù–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –ø—É—Å—Ç—å –º–æ–¥–µ–ª—å –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É.
                logger.warning(
                    f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {user_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({current_total_tokens} —Ç–æ–∫–µ–Ω–æ–≤), "
                    f"–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç MAX_CONTEXT_TOKENS ({Config.MAX_CONTEXT_TOKENS}) –∏–ª–∏ "
                    f"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∞–ª–µ–µ —É—Ä–µ–∑–∞–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –µ—Å—Ç—å."
                )
                break
        
        final_message_count = len(history)
        if final_message_count < initial_message_count:
            logger.info(
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {user_id} —É—Ä–µ–∑–∞–Ω–∞ —Å {initial_message_count} –¥–æ {final_message_count} —Å–æ–æ–±—â–µ–Ω–∏–π. "
                f"–¢–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —É—Ä–µ–∑–∫–∏: {current_total_tokens}."
            )
        
        self.conversation_manager.conversations[user_id] = history
        return history

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message or not update.effective_user:
            logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = update.effective_user.id
        message = update.message
        
        if not self.rate_limiter.is_allowed(user_id):
            await message.reply_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", quote=True)
            return

        parts: List[Part] = []
        text_content = ""

        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ. –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –¥–ª—è Gemini.
        if message.text:
            text_content = message.text
        
        if message.photo:
            try:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
                photo_file = await message.photo[-1].get_file()
                photo_bytes = await photo_file.download_as_bytearray()
                parts.append(Part.from_data(data=bytes(photo_bytes), mime_type="image/jpeg"))
                
                # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if message.caption:
                    text_content = message.caption # –ò—Å–ø–æ–ª—å–∑—É–µ–º caption –∫–∞–∫ text_content, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                
                # –ï—Å–ª–∏ –±—ã–ª –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å —Ñ–æ—Ç–æ, –Ω–æ –¥–ª—è –æ–±—â–Ω–æ—Å—Ç–∏),
                # –∏ –ø–æ–¥–ø–∏—Å—å, –ø–æ–¥–ø–∏—Å—å –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è text_content
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç_–∫–æ–Ω—Ç–µ–Ω—Ç (–∏–∑ message.text –∏–ª–∏ message.caption) - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if text_content:
                    parts.append(Part.from_text(text_content))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {user_id}: {e}", exc_info=True)
                await message.reply_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", quote=True)
                return
        elif text_content: # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ message.photo –±—ã–ª–æ –ø—É—Å—Ç—ã–º)
            parts.append(Part.from_text(text_content))

        if not parts:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ).")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
            # await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", quote=True)
            return

        placeholder_message = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –±–ª–æ–∫–∞ finally/except
        try:
            await context.bot.send_chat_action(chat_id=user_id, action="typing")
            
            self.conversation_manager.add_message(user_id, "user", parts)
            pruned_history = await self._prune_history_by_tokens(user_id)
            
            # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ pruned_history –ø—É—Å—Ç, generate_content_async –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É.
            # –ù–æ –Ω–∞—à–∞ –ª–æ–≥–∏–∫–∞ add_message + _prune_history_by_tokens –¥–æ–ª–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å,
            # —á—Ç–æ pruned_history —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            if not pruned_history:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: pruned_history –ø—É—Å—Ç –¥–ª—è user {user_id} –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API.")
                await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /clear –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", quote=True)
                return

            placeholder_message = await message.reply_text("üß† –î—É–º–∞—é...", quote=True)
            
            response_stream = await self.model.generate_content_async(
                contents=pruned_history, # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä contents
                stream=True
            )
            
            await self._stream_and_edit_message(response_stream, placeholder_message, user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}", exc_info=True)
            error_message_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Gemini
            str_e = str(e).lower()
            if "safety setting" in str_e or "blocked" in str_e or "permission_denied" in str_e or "resource_exhausted" in str_e: # –û–±—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º —Å API
                error_message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ /clear."
            elif "quota" in str_e:
                error_message_text = " –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Gemini. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            try:
                if placeholder_message:
                    await placeholder_message.edit_text(error_message_text)
                else:
                    await message.reply_text(error_message_text, quote=True)
            except Exception as send_error:
                 logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")


    async def _stream_and_edit_message(self, stream: AsyncGenerator, tg_message: Message, user_id: int):
        full_response = ""
        buffer = ""
        last_edit_time = time.monotonic()
        edit_interval = 1.2  # —Å–µ–∫—É–Ω–¥—ã
        min_buffer_len_for_edit = 50 

        try:
            async for chunk in stream:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞–Ω–∫–∞ (–≤–¥—Ä—É–≥ —á–∞–Ω–∫ –±–µ–∑ .text)
                text_part = getattr(chunk, 'text', None)
                if text_part:
                    buffer += text_part
                    full_response += text_part
                
                current_time = time.monotonic()
                if (current_time - last_edit_time > edit_interval and buffer) or len(buffer) >= min_buffer_len_for_edit :
                    if not buffer.strip() and not full_response.strip(): # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
                        continue
                    try:
                        await tg_message.edit_text(full_response + "‚ñà", parse_mode=ParseMode.MARKDOWN)
                        last_edit_time = current_time
                        buffer = "" # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    except BadRequest as e:
                        if "Message is not modified" not in str(e).lower(): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –æ—à–∏–±–∫—É
                            logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (user {user_id}): {e} | –¢–µ–∫—Å—Ç: '{full_response + '‚ñà'}'")
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –±—É—Ñ–µ—Ä –Ω–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (user {user_id}): {e}")
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if full_response.strip(): # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                try:
                    await tg_message.edit_text(full_response, parse_mode=ParseMode.MARKDOWN)
                except BadRequest as e:
                    if "Message is not modified" not in str(e).lower():
                        logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (user {user_id}): {e} | –¢–µ–∫—Å—Ç: '{full_response}'")
                except Exception as e:
                     logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (user {user_id}): {e}")
                self.conversation_manager.add_message(user_id, "model", [Part.from_text(full_response)])
            elif not full_response and getattr(stream, '_done_iterating', False) : # –°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç
                logger.info(f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ —Ç–æ–ª—å–∫–æ safety) –¥–ª—è user {user_id}.")
                await tg_message.edit_text("üòï –û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.", parse_mode=ParseMode.MARKDOWN)
            # –ï—Å–ª–∏ full_response –ø—É—Å—Ç–æ–π, –Ω–æ —Å—Ç—Ä–∏–º –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ), —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å,
            # –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ.

        except Exception as e: # –û—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user {user_id}: {e}", exc_info=True)
            try:
                # –ï—Å–ª–∏ –±—ã–ª –∫–∞–∫–æ–π-—Ç–æ —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –º–æ–∂–Ω–æ –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å
                error_display_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
                if full_response.strip():
                    error_display_text += f"\n–ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{full_response[:1000]}" # –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
                await tg_message.edit_text(error_display_text, parse_mode=ParseMode.MARKDOWN)
            except Exception as final_edit_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è user {user_id}: {final_edit_error}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {Config.GEMINI_MODEL_NAME} Telegram Bot...")
        Config.validate()
        
        bot_instance = GeminiBot()
        
        application = (Application.builder()
                       .token(Config.TELEGRAM_BOT_TOKEN) # type: ignore[arg-type]
                       .concurrent_updates(10) # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                       .post_init(bot_instance.post_init)
                       .build())
        
        application.add_handler(MessageHandler(
            (filters.TEXT | filters.PHOTO) & ~filters.COMMAND,
            bot_instance.handle_message
        ))
        application.add_handler(CommandHandler("start", bot_instance.start_command))
        application.add_handler(CommandHandler("clear", bot_instance.clear_command))
        
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫ polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except ValueError as ve:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ve}", exc_info=True)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()