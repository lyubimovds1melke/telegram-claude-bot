import asyncio
import logging
import os
from typing import Dict, List, Any
from datetime import datetime, timedelta
from telegram import Update, Message
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest
import google.generativeai as genai
from google.generativeai.types import GenerationConfig, SafetySetting, HarmCategory, Part
from dotenv import load_dotenv

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ä–æ–ª–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    SYSTEM_INSTRUCTION = os.getenv(
        "SYSTEM_INSTRUCTION",
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –≤ Telegram. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ì–†–û–ú–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç Gemini 1.5 Pro, –Ω–æ —Å —Ä–∞–∑—É–º–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    MAX_CONTEXT_TOKENS = int(os.getenv("MAX_CONTEXT_TOKENS", "700000")) # 700k —Ç–æ–∫–µ–Ω–æ–≤
    MAX_CONVERSATION_MESSAGES = int(os.getenv("MAX_CONVERSATION_MESSAGES", "100")) # –õ–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    MAX_MESSAGE_LENGTH = 4096 # –õ–∏–º–∏—Ç Telegram
    RATE_LIMIT_MINUTES = int(os.getenv("RATE_LIMIT_MINUTES", "1"))
    RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", "20")) # 1.5 Pro –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤

    @classmethod
    def validate(cls):
        if not cls.TELEGRAM_BOT_TOKEN or not cls.GEMINI_API_KEY:
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, GEMINI_API_KEY")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ ---
# –ö–ª–∞—Å—Å—ã RateLimiter –∏ ConversationManager –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
# —Ç–∞–∫ –∫–∞–∫ –∏—Ö –ª–æ–≥–∏–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏.
# –ú—ã –ª–∏—à—å –¥–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ö—Ä–∞–Ω–µ–Ω–∏—è 'parts' –≤–º–µ—Å—Ç–æ 'content'.
class RateLimiter: # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞) ...
    def __init__(self): self.user_requests: Dict[int, List[datetime]] = {}
    def is_allowed(self, user_id: int) -> bool:
        now = datetime.now()
        cutoff = now - timedelta(minutes=Config.RATE_LIMIT_MINUTES)
        timestamps = self.user_requests.get(user_id, [])
        valid_timestamps = [t for t in timestamps if t > cutoff]
        if len(valid_timestamps) >= Config.RATE_LIMIT_REQUESTS:
            self.user_requests[user_id] = valid_timestamps
            return False
        valid_timestamps.append(now)
        self.user_requests[user_id] = valid_timestamps
        return True
    def cleanup_old_data(self):
        cutoff = datetime.now() - timedelta(hours=1)
        to_remove = [uid for uid, ts in self.user_requests.items() if not any(t > cutoff for t in ts)]
        for uid in to_remove: del self.user_requests[uid]
        if to_remove: logger.info(f"üßπ RateLimiter: –æ—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(to_remove)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

class ConversationManager:
    def __init__(self):
        self.conversations: Dict[int, List[Dict[str, Any]]] = {}
        self.last_activity: Dict[int, datetime] = {}
    def add_message(self, user_id: int, role: str, parts: List[Part]):
        if user_id not in self.conversations:
            self.conversations[user_id] = []
        self.conversations[user_id].append({"role": role, "parts": parts})
        self.last_activity[user_id] = datetime.now()
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
        if len(self.conversations[user_id]) > Config.MAX_CONVERSATION_MESSAGES:
            self.conversations[user_id] = self.conversations[user_id][-Config.MAX_CONVERSATION_MESSAGES:]
    def get_conversation(self, user_id: int) -> List[Dict[str, Any]]:
        return self.conversations.get(user_id, [])
    def clear_conversation(self, user_id: int):
        if user_id in self.conversations: del self.conversations[user_id]
        if user_id in self.last_activity: del self.last_activity[user_id]
    def cleanup_inactive_conversations(self):
        cutoff = datetime.now() - timedelta(hours=24)
        to_remove = [uid for uid, t in self.last_activity.items() if t < cutoff]
        for uid in to_remove: self.clear_conversation(uid)
        if to_remove: logger.info(f"üßπ ConversationManager: –æ—á–∏—â–µ–Ω–æ {len(to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class GeminiBot:
    def __init__(self):
        genai.configure(api_key=Config.GEMINI_API_KEY)
        
        # 1. –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ 1.5 Pro –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.model = genai.GenerativeModel(
            model_name="gemini-1.5-pro-latest",
            system_instruction=Config.SYSTEM_INSTRUCTION,
            generation_config=GenerationConfig(
                temperature=0.75,
                top_p=0.95,
                top_k=40,
                max_output_tokens=8192,
            ),
            safety_settings=[
                SafetySetting(HarmCategory.HARM_CATEGORY_HARASSMENT, "BLOCK_MEDIUM_AND_ABOVE"),
                SafetySetting(HarmCategory.HARM_CATEGORY_HATE_SPEECH, "BLOCK_MEDIUM_AND_ABOVE"),
                SafetySetting(HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, "BLOCK_MEDIUM_AND_ABOVE"),
                SafetySetting(HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, "BLOCK_MEDIUM_AND_ABOVE"),
            ]
        )
        self.conversation_manager = ConversationManager()
        self.rate_limiter = RateLimiter()

    # ... post_init –∏ _periodic_cleanup –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    async def post_init(self, application: Application): asyncio.create_task(self._periodic_cleanup())
    async def _periodic_cleanup(self):
        while True:
            await asyncio.sleep(3600)
            try:
                self.conversation_manager.cleanup_inactive_conversations()
                self.rate_limiter.cleanup_old_data()
            except Exception as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 1.5 Pro
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ **Google Gemini 1.5 Pro**.\n\n"
            "–Ø –ø–æ–º–Ω—é –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞–∂–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            parse_mode=ParseMode.MARKDOWN
        )

    # ... help_command, status_command, clear_command –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å ...
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.conversation_manager.clear_conversation(update.effective_user.id)
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")

    # 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º, –∞ –Ω–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    async def _prune_history_by_tokens(self, user_id: int) -> List[Dict[str, Any]]:
        """–û–±—Ä–µ–∑–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤."""
        history = self.conversation_manager.get_conversation(user_id)
        while True:
            # –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            token_count = await self.model.count_tokens_async(history)
            if token_count.total_tokens <= Config.MAX_CONTEXT_TOKENS:
                break
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            if len(history) > 1:
                history.pop(0)
            else: # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                break 
        
        self.conversation_manager.conversations[user_id] = history
        return history

    # 3. –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.rate_limiter.is_allowed(user_id):
            await message.reply_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        parts = []
        # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ)
        if message.text:
            parts.append(Part.from_text(message.text))
        if message.photo:
            photo_file = await message.photo[-1].get_file()
            photo_bytes = await photo_file.download_as_bytearray()
            parts.append(Part.from_data(bytes(photo_bytes), mime_type="image/jpeg"))
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if message.caption:
                parts.append(Part.from_text(message.caption))

        if not parts:
            return

        try:
            await context.bot.send_chat_action(chat_id=user_id, action="typing")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_manager.add_message(user_id, "user", parts)
            
            # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–æ–∫–µ–Ω–∞–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            pruned_history = await self._prune_history_by_tokens(user_id)
            
            # 4. –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            placeholder_message = await message.reply_text("üß† –î—É–º–∞—é...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
            response_stream = await self.model.generate_content_async(
                pruned_history,
                stream=True
            )
            
            await self._stream_and_edit_message(response_stream, placeholder_message)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}", exc_info=True)
            await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /clear.")
    
    # 5. –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    async def _stream_and_edit_message(self, stream, message: Message):
        """–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–∏–º –æ—Ç Gemini –∏ –ø–ª–∞–≤–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
        full_response = ""
        buffer = ""
        last_edit_time = time.time()
        
        async for chunk in stream:
            # –ò–Ω–æ–≥–¥–∞ –≤ —Å—Ç—Ä–∏–º–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏ –∏–ª–∏ —á–∞–Ω–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            if text_part := chunk.text:
                buffer += text_part
                full_response += text_part
            
            current_time = time.time()
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 1.2 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if (current_time - last_edit_time > 1.2 and buffer) or len(buffer) > 200:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º "‚ñà" –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
                    await message.edit_text(full_response + "‚ñà", parse_mode=ParseMode.MARKDOWN)
                except BadRequest as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if "Message is not modified" not in str(e):
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                last_edit_time = current_time
                buffer = ""
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫—É—Ä—Å–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        if full_response:
            try:
                await message.edit_text(full_response, parse_mode=ParseMode.MARKDOWN)
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        else:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ safety settings)
            await message.edit_text("–û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.", parse_mode=ParseMode.MARKDOWN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_manager.add_message(message.chat.id, "model", [Part.from_text(full_response)])

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Gemini 1.5 Pro Telegram Bot...")
        Config.validate()
        bot = GeminiBot()
        
        application = (Application.builder()
                       .token(Config.TELEGRAM_BOT_TOKEN)
                       .concurrent_updates(True)
                       .post_init(bot.post_init)
                       .build())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –ò —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
        application.add_handler(MessageHandler(
            (filters.TEXT | filters.PHOTO) & ~filters.COMMAND,
            bot.handle_message
        ))
        application.add_handler(CommandHandler("start", bot.start_command))
        application.add_handler(CommandHandler("clear", bot.clear_command))
        # application.add_error_handler(...) # –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫ polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    # –ò–º–ø–æ—Ä—Ç 'time' –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞
    import time
    main()